redux store
    big whole object 
    it is kept in global central place

slices
    small parts of redux store
    to keep data separate , we make logical paritions , they are slices
    example - cartSlice,userSlice,darkthemeSlice
    we cannot directly modify cart slice
    how to write data
        we have to dispatch an action
        when we dispatch an action it calls a function (reducer function)
        the function can modify the slice of redux store

    how to read data from slice
        we will useSelector hook to read data from store
        and the selector will modify the component
        when we use selector it is knows as subscribing the the store
        subscribing means to be in sync with store
        if the data in slice changes it updates the component

In app store there is one big reducer  , it can have multiple small reducers
In slice,we create multiple reducers
reducer is combination of multiple small reducers

1. configureStore

    Type - Function
    Purpose - configureStore is a function from Redux Toolkit that helps create a Redux store with built-in configurations for middleware and Redux DevTools. It simplifies store setup.
    Props/Parameters:
    reducer - The root reducer, which combines all slice reducers.
    middleware - Optional custom middleware to enhance store capabilities.
    devTools - Optional flag to enable Redux DevTools.
    Example Syntax:
        
        import { configureStore } from '@reduxjs/toolkit';
        import rootReducer from './reducers'; // Import root reducer

        const store = configureStore({
        reducer - rootReducer, // Combine all reducers here
        devTools - process.env.NODE_ENV !== 'production', // Enable in development
        });
        Returns - A configured Redux store.

2. slice

    Type - Object (created using a function)
    Purpose - A slice represents a specific part of the Redux state and includes the reducer, initial state, and actions related to that part. It organizes state management for features.
    Props/Parameters:
    name - A string identifying the slice.
    initialState - The initial state value for that slice.
    reducers - An object defining reducer functions for actions.
    Example Syntax:
        
        import { createSlice } from '@reduxjs/toolkit';

        const counterSlice = createSlice({
        name - 'counter',
        initialState - { value - 0 },
        reducers - {
            increment - (state) => {
            state.value += 1; // Increment state value
            },
            decrement - (state) => {
            state.value -= 1; // Decrement state value
            },
        },
        });

        export const { increment, decrement } = counterSlice.actions; // Export actions
        export default counterSlice.reducer; // Export reducer
        Returns - An object containing the slice's reducer and action creators.

3. Provider (from React-Redux)

    Type - Component
    Purpose - The Provider component makes the Redux store available to all nested components. It wraps your application, allowing components to access the Redux store using hooks.
    Props:
    store - The Redux store instance created with configureStore.
    Example Syntax:
        
        import { Provider } from 'react-redux';
        import store from './store'; // Your Redux store
        import App from './App'; // Main app component

        const Root = () => (
        <Provider store={store}>
            <App />
        </Provider>
        );

        export default Root; // Render the app with the Provider
        Returns - It renders its child components wrapped with the Redux store context.

4. useSelector
    Type - Hook
    Purpose - useSelector is a hook that allows components to access data from the Redux store. It takes a selector function that retrieves a specific slice of state.
    Props/Parameters:
    Selector Function - A function that receives the entire state and returns the desired part of it.
    Example Syntax:
        
        import { useSelector } from 'react-redux';

        const CounterComponent = () => {
        const count = useSelector((state) => state.counter.value); // Get counter value from state
        return <div>{count}</div>; // Display the counter value
        };
        Returns - The selected state value based on the provided selector function.

5. dispatch

    Type - Function (method of the store)
    Purpose - dispatch is a method used to send actions to the Redux store, triggering state updates. It is essential for modifying the state.
    Props/Parameters:
    Action Object - An object representing the action, usually containing a type and an optional payload.
    Example Syntax:
        
        import { useDispatch } from 'react-redux';
        import { increment } from './counterSlice'; // Import action from slice

        const CounterComponent = () => {
        const dispatch = useDispatch(); // Get the dispatch function

        const handleIncrement = () => {
            dispatch(increment()); // Dispatch the increment action
        };

        return <button onClick={handleIncrement}>Increment</button>; // Button to increment
        };
        Returns - It does not return a value; its purpose is to trigger state updates.

6. useDispatch
    Type - Hook
    Purpose - useDispatch is a hook that returns the dispatch function from the Redux store. It allows components to send actions to the store.
    Props/Parameters - No parameters are required.
    Example Syntax:
        
        import { useDispatch } from 'react-redux';
        import { decrement } from './counterSlice'; // Import action from slice

        const CounterComponent = () => {
        const dispatch = useDispatch(); // Get the dispatch function

        const handleDecrement = () => {
            dispatch(decrement()); // Dispatch the decrement action
        };

        return <button onClick={handleDecrement}>Decrement</button>; // Button to decrement
        };
        Returns - It returns the dispatch function for sending actions to the store.

7. Payload

    Definition: The payload is the data included in an action object that provides additional information for updating the state.
    Purpose: It allows reducers to access specific data required for processing an action.
    Example:

        // Action creator
        const increment = (amount) => ({
        type: 'counter/increment', // Action type
        payload: amount, // The data to be added
        });

        // Dispatching the action
        dispatch(increment(5)); // Dispatches an action with payload of 5

8 . State

    Definition: The state parameter in a reducer represents the current state of the specific slice being managed.
    Purpose: It allows reducers to determine how the state should change in response to an action.
    Example:
    
        // Initial state
        const initialState = { value: 0 };

        // Reducer function
        const counterReducer = (state = initialState, action) => {
        switch (action.type) {
            case 'counter/increment':
            return {
                ...state,
                value: state.value + action.payload, // Update state using payload
            };
            case 'counter/decrement':
            return {
                ...state,
                value: state.value - action.payload, // Update state using payload
            };
            default:
            return state; // Return current state if no matching action
        }
        };
    
    How It Works Together
    Dispatching an Action:

    When you dispatch increment(5), it creates an action with:
        {
        type: 'counter/increment',
        payload: 5
        }
        Reducer Logic:

        The counterReducer receives the current state (e.g., { value: 0 }) and the action:
        {
        type: 'counter/increment',
        payload: 5
        }
    It checks the action type and updates the state:
    For increment, it returns a new state: { value: 0 + 5 } â†’ { value: 5 }.

Reducer in appStore 
    - A root reducer combines multiple slice reducers, managing the overall state of the application. It defines how the entire application's state is updated based on dispatched actions.

Reducers in Slice 
    - Reducers defined within a slice manage a specific part of the state related to that slice. They encapsulate the logic for updating that particular piece of state in response to actions.

- explain diff between these , how these 3 qill be called
    onClick={handleAddItem}  --> works
    onClick={() =>{
        handleAddItem(item)  --> works
    }}
    onClick={handleAddItem(item)} // wromg calls immediately without clicking

